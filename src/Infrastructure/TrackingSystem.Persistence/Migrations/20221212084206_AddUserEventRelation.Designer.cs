// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackingSystem.Persistence.DataAccess;

#nullable disable

namespace JustCommerce.Persistence.Migrations
{
    [DbContext(typeof(TrackingSystemDbContext))]
    [Migration("20221212084206_AddUserEventRelation")]
    partial class AddUserEventRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Events.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Events.EventFileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventFile", (string)null);
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Identity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProfileType")
                        .HasColumnType("int");

                    b.Property<int>("RegisterSource")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Theme")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Identity.UserPermissionEntity", b =>
                {
                    b.Property<string>("PermissionDomainName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PermissionFlagValue")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("PermissionDomainName", "PermissionFlagValue", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermission", (string)null);
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Truck.TruckDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Heading")
                        .HasColumnType("int");

                    b.Property<bool>("IgnitionState")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("LastLatitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("LastLocalizationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("LastLongitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("TruckId")
                        .IsUnique();

                    b.ToTable("TruckDetails", (string)null);
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Truck.TruckEntity", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegisterNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TruckId");

                    b.HasIndex("TruckId");

                    b.ToTable("Truck", (string)null);
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Truck.UserTruckEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TruckId");

                    b.HasIndex("TruckId");

                    b.ToTable("UserTruck", (string)null);
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Events.EventEntity", b =>
                {
                    b.HasOne("TrackingSystem.Domain.Entities.Identity.UserEntity", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Events.EventFileEntity", b =>
                {
                    b.HasOne("TrackingSystem.Domain.Entities.Events.EventEntity", "Event")
                        .WithMany("EventFiles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Identity.UserPermissionEntity", b =>
                {
                    b.HasOne("TrackingSystem.Domain.Entities.Identity.UserEntity", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Truck.TruckDetailsEntity", b =>
                {
                    b.HasOne("TrackingSystem.Domain.Entities.Truck.TruckEntity", "Truck")
                        .WithOne("TruckDetails")
                        .HasForeignKey("TrackingSystem.Domain.Entities.Truck.TruckDetailsEntity", "TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Truck.UserTruckEntity", b =>
                {
                    b.HasOne("TrackingSystem.Domain.Entities.Truck.TruckEntity", "Truck")
                        .WithMany("UserTrucks")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackingSystem.Domain.Entities.Identity.UserEntity", "User")
                        .WithMany("UserTrucks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Truck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Events.EventEntity", b =>
                {
                    b.Navigation("EventFiles");
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Identity.UserEntity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserTrucks");
                });

            modelBuilder.Entity("TrackingSystem.Domain.Entities.Truck.TruckEntity", b =>
                {
                    b.Navigation("TruckDetails")
                        .IsRequired();

                    b.Navigation("UserTrucks");
                });
#pragma warning restore 612, 618
        }
    }
}
